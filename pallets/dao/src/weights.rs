// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_dao
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-20, STEPS: `100`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:

// ./target/release/node-template

// benchmark

// --chain

// dev

// --execution

// wasm

// --wasm-execution

// compiled

// --pallet

// pallet_dao

// --extrinsic

// *

// --steps

// 100

// --repeat

// 50

// --output

// ./pallets/dao/src/weights.rs

// --template

// .maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dao.
pub trait WeightInfo {

	fn create_vision(s: u32, ) -> Weight;

	fn remove_vision(s: u32, ) -> Weight;

	fn sign_vision(s: u32, ) -> Weight;

	fn unsign_vision(s: u32, ) -> Weight;

	fn create_organization(s: u32, ) -> Weight;

	fn dissolve_organization(s: u32, ) -> Weight;

	fn add_members(s: u32, ) -> Weight;

	fn add_tasks(s: u32, ) -> Weight;

	fn remove_members(s: u32, ) -> Weight;

	fn remove_tasks(s: u32, ) -> Weight;

}

/// Weights for pallet_dao using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {



	// Storage: Dao Vision (r:1 w:1)

	// Storage: Dao VisionCount (r:1 w:1)

	fn create_vision(_s: u32, ) -> Weight {
		(13_737_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Vision (r:1 w:1)

	// Storage: Dao VisionCount (r:1 w:1)

	fn remove_vision(_s: u32, ) -> Weight {
		(15_106_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Vision (r:1 w:0)

	// Storage: Dao ApplicantsToOrganization (r:1 w:1)

	fn sign_vision(_s: u32, ) -> Weight {
		(13_310_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Vision (r:1 w:0)

	// Storage: Dao ApplicantsToOrganization (r:1 w:1)

	fn unsign_vision(_s: u32, ) -> Weight {
		(13_867_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao OrganizationCount (r:1 w:1)

	fn create_organization(_s: u32, ) -> Weight {
		(12_755_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao OrganizationCount (r:1 w:1)

	fn dissolve_organization(_s: u32, ) -> Weight {
		(13_635_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao MemberOf (r:1 w:1)

	fn add_members(_s: u32, ) -> Weight {
		(16_795_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:0)

	// Storage: Dao OrganizationTasks (r:1 w:1)

	fn add_tasks(_s: u32, ) -> Weight {
		(15_368_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao MemberOf (r:1 w:1)

	fn remove_members(_s: u32, ) -> Weight {
		(19_109_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:0)

	// Storage: Dao OrganizationTasks (r:1 w:1)

	fn remove_tasks(_s: u32, ) -> Weight {
		(15_855_000 as Weight)


			.saturating_add(T::DbWeight::get().reads(2 as Weight))



			.saturating_add(T::DbWeight::get().writes(1 as Weight))


	}

}

// For backwards compatibility and tests
impl WeightInfo for () {


	// Storage: Dao Vision (r:1 w:1)

	// Storage: Dao VisionCount (r:1 w:1)

	fn create_vision(_s: u32, ) -> Weight {
		(13_737_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Vision (r:1 w:1)

	// Storage: Dao VisionCount (r:1 w:1)

	fn remove_vision(_s: u32, ) -> Weight {
		(15_106_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Vision (r:1 w:0)

	// Storage: Dao ApplicantsToOrganization (r:1 w:1)

	fn sign_vision(_s: u32, ) -> Weight {
		(13_310_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Vision (r:1 w:0)

	// Storage: Dao ApplicantsToOrganization (r:1 w:1)

	fn unsign_vision(_s: u32, ) -> Weight {
		(13_867_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao OrganizationCount (r:1 w:1)

	fn create_organization(_s: u32, ) -> Weight {
		(12_755_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao OrganizationCount (r:1 w:1)

	fn dissolve_organization(_s: u32, ) -> Weight {
		(13_635_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao MemberOf (r:1 w:1)

	fn add_members(_s: u32, ) -> Weight {
		(16_795_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:0)

	// Storage: Dao OrganizationTasks (r:1 w:1)

	fn add_tasks(_s: u32, ) -> Weight {
		(15_368_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(1 as Weight))


	}


	// Storage: Dao Organization (r:1 w:1)

	// Storage: Dao MemberOf (r:1 w:1)

	fn remove_members(_s: u32, ) -> Weight {
		(19_109_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(2 as Weight))


	}


	// Storage: Dao Organization (r:1 w:0)

	// Storage: Dao OrganizationTasks (r:1 w:1)

	fn remove_tasks(_s: u32, ) -> Weight {
		(15_855_000 as Weight)


			.saturating_add(RocksDbWeight::get().reads(2 as Weight))



			.saturating_add(RocksDbWeight::get().writes(1 as Weight))


	}

}
